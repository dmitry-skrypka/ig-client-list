{"version":3,"sources":["logic/app/actionTypes.js","helpers/searchInArray.js","helpers/config.js","components/list/client-item.js","components/list/index.js","components/info-tab/index.js","components/search-input/index.jsx","components/title/index.jsx","components/app/index.js","helpers/getDataFromLocalJson.js","components/app/container.js","logic/app/actions.js","serviceWorker.js","logic/defaultState.js","logic/app/reducer.js","logic/reducer.js","index.js"],"names":["GET_CLIENTS_INFO","SELECTED_CLIENT_UPDATE","SEARCH_UPDATE","search","el","keyword","type","match","string","searchInText","number","boolean","array","searchInArray","object","searchInObject","Error","concat","getFuncByType","Array","isArray","searchFunc","text","toString","toLowerCase","indexOf","obj","Object","values","arr","undefined","find","ClientItem","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleItemClick","props","onClick","client","inherits","createClass","key","value","selected","avatar","general","firstName","lastName","title","job","JSON","stringify","react_default","a","createElement","List","Item","style","background","Image","size","circular","src","Content","Header","Description","React","Component","ClientList","data","length","clientArray","map","index","client_item_ClientItem","onSelect","selection","animated","divided","padding","Icon","centered","name","InfoTab","console","log","_this$props$selected$","_this$props$selected$2","contact","email","phone","_this$props$selected$3","address","city","country","street","zipCode","_this$props$selected$4","company","Group","Meta","Extra","SearchInput","handleInput","event","target","onChange","Input","fluid","icon","placeholder","Title","_this$props","as","textAlign","App","handleSearchInput","list","onInputChange","filter","url","_this2","Promise","success","fail","request","XMLHttpRequest","open","addEventListener","status","responseText","statusText","send","then","getData","parse","data_to_render","react","Grid","celled","container","Row","Column","width","title_Title","search_input_SearchInput","list_ClientList","info_tab_InfoTab","connect","state","objectSpread","app","dispatch","payload","Boolean","window","location","hostname","rootReducer","arguments","defaultState","action","combineReducers","store","createStore","reducer","composeWithDevTools","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57b0d637.chunk.js","sourcesContent":["export const GET_CLIENTS_INFO = \"GET_CLIENTS_INFO\";\r\nexport const SELECTED_CLIENT_UPDATE = \"SELECTED_CLIENT_UPDATE:UPDATE\";\r\nexport const SEARCH_UPDATE = \"SEARCH_UPDATE_UPDATE:UPDATE\";\r\n","export function findFromList(list, keyword) {\r\n  return list.filter(el => search(el, keyword));\r\n}\r\n\r\nfunction search(el, keyword) {\r\n  const type = Array.isArray(el) ? \"array\" : typeof el;\r\n  const searchFunc = getFuncByType(type);\r\n\r\n  return searchFunc(el, keyword);\r\n}\r\n\r\nfunction getFuncByType(type) {\r\n  const match = {\r\n    string: searchInText,\r\n    number: searchInText,\r\n    boolean: searchInText,\r\n    array: searchInArray,\r\n    object: searchInObject\r\n  };\r\n\r\n  if (typeof match[type] !== \"undefined\") {\r\n    return match[type];\r\n  } else {\r\n    throw new Error(`Unknown element type \"${type}\"`);\r\n  }\r\n}\r\n\r\nfunction searchInText(text, keyword) {\r\n  return (\r\n    text\r\n      .toString()\r\n      .toLowerCase()\r\n      .indexOf(keyword.toLowerCase()) !== -1\r\n  );\r\n}\r\n\r\nfunction searchInObject(obj, keyword) {\r\n  return searchInArray(Object.values(obj), keyword);\r\n}\r\n\r\nfunction searchInArray(arr, keyword) {\r\n  return arr.find(el => search(el, keyword)) !== undefined;\r\n}\r\n","export const URL = \"./clients.json\";\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { List, Image } from \"semantic-ui-react\";\r\n\r\nexport class ClientItem extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n  handleItemClick = () => {\r\n    this.props.onClick(this.props.client);\r\n  };\r\n  render() {\r\n    // console.log(this.props)\r\n    let selected = false;\r\n    const avatar = this.props.client.general.avatar;\r\n    const firstName = this.props.client.general.firstName;\r\n    const lastName = this.props.client.general.lastName;\r\n    const title = this.props.client.job.title;\r\n    if (\r\n      this.props.selected &&\r\n      JSON.stringify(this.props.selected) === JSON.stringify(this.props.client)\r\n    ) {\r\n      selected = !selected;\r\n    }\r\n    return (\r\n      <List.Item\r\n        onClick={this.handleItemClick}\r\n        style={{ background: selected ? \"#e7ecec\" : \"white\" }}\r\n      >\r\n        <Image size=\"mini\" avatar circular src={avatar} />\r\n\r\n        <List.Content>\r\n          <List.Header>\r\n            {firstName} {lastName}\r\n          </List.Header>\r\n          <List.Description>{title}</List.Description>\r\n        </List.Content>\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\nClientItem.propTypes = {\r\n  client: PropTypes.object\r\n};\r\n","import React from \"react\";\nimport { List, Icon } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { ClientItem } from \"./client-item\";\n\n\nexport default class ClientList extends React.Component {\n  render() {\n    if (this.props.data.length) {\n      const clients = this.props.data;\n      const clientArray = clients.map((client, index) => (\n        <ClientItem\n          key={index}\n          client={client}\n          selected={this.props.selected}\n          onClick={this.props.onSelect}\n        />\n      ));\n      return (\n        <List selection animated divided>\n          {clientArray}\n        </List>\n      );\n    }\n    return (\n      <div style={{ padding: 10 }}>\n        {\" \"}\n        <Icon centered name=\"frown\" />\n        Nothing Found...{\" \"}\n      </div>\n    );\n  }\n}\n\nClientList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object)\n};\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport { Item, Icon } from \"semantic-ui-react\";\n\nexport class InfoTab extends React.Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    console.log(this.props);\n    if (this.props.selected.general) {\n      const { avatar, firstName, lastName } = this.props.selected.general;\n      const { email, phone } = this.props.selected.contact;\n      const { city, country, street, zipCode } = this.props.selected.address;\n      const { company, title } = this.props.selected.job;\n      return (\n        <Item.Group divided>\n          <Item>\n            <Item.Image size=\"small\" src={avatar} />\n\n            <Item.Content>\n              <Item.Header>\n                {firstName} {lastName}\n              </Item.Header>\n              <Item.Meta>\n                <span>\n                  {title} in {company}\n                </span>\n              </Item.Meta>\n\n              <Item.Extra>\n                <Icon centered name=\"mail\" /> email: {email}\n              </Item.Extra>\n              <Item.Extra>\n                {\" \"}\n                <Icon centered name=\"phone square\" />\n                phone: {phone}\n              </Item.Extra>\n              <Item.Extra>\n                {\" \"}\n                <Icon centered name=\"map marker alternate\" />\n                {country} {city} {street} {zipCode}\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      );\n    } else {\n      return <span>Please select Client</span>;\n    }\n  }\n}\nInfoTab.propTypes = {\n  selected: PropTypes.object\n};\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nexport class SearchInput extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  handleInput = (event, value) => {\r\n    console.log(event.target.value);\r\n    this.props.onChange(event);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Input\r\n        fluid\r\n        icon=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={this.handleInput}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nSearchInput.propTypes = {\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { Header, Icon, Input } from \"semantic-ui-react\";\r\n\r\nexport class Title extends React.Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props);\r\n    const { name, icon } = this.props;\r\n    return (\r\n      <Header as=\"h4\" textAlign=\"center\">\r\n        <Header.Content>\r\n          <Icon centered name={icon} />\r\n          {name}\r\n        </Header.Content>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nTitle.propTypes = {\r\n\r\n\tname: PropTypes.string,\r\n\ticon: PropTypes.string\r\n};\r\n","import React, { Fragment } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { mapStateToProps, mapDispatchToProps } from \"./container\";\nimport getDataFromLocalJson from \"../../helpers/getDataFromLocalJson\";\nimport { findFromList } from \"../../helpers/searchInArray\";\nimport { URL } from \"../../helpers/config\";\nimport ClientList from \"../list\";\nimport { InfoTab } from \"../info-tab\";\nimport { SearchInput } from \"../search-input\";\nimport { Container, Grid, Header, Icon } from \"semantic-ui-react\";\nimport { Title } from \"../title\";\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    getDataFromLocalJson(URL).then(data => {\n      this.props.getData(JSON.parse(data));\n    });\n  }\n  handleItemClick = data => {\n    this.props.onSelect(data);\n  };\n\n  handleSearchInput = event => {\n    this.props.onInputChange(findFromList(this.props.data, event.target.value));\n  };\n  render() {\n    const data = this.props.data_to_render;\n    const selected = this.props.selected;\n    return (\n      <Fragment>\n        {/*<Container>*/}\n        <Grid celled container>\n          <Grid.Row style={{ background: \"#e7ecec\" }}>\n            <Grid.Column width={5}>\n              <Title name={\"Clients\"} icon={\"users\"} />\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <Title name={\"Info\"} icon={\"info circle\"} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={5}>\n              <SearchInput onChange={this.handleSearchInput} />\n              <ClientList\n                data={data}\n                selected={selected}\n                onSelect={this.handleItemClick}\n              />\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <InfoTab selected={selected} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {/*</Container>*/}\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","export default url => {\r\n  return new Promise((success, fail) => {\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n\r\n    request.addEventListener(\"load\", () => {\r\n      request.status >= 200 && request.status < 400\r\n        ? success(request.responseText)\r\n        : fail(new Error(`Request Failed: ${request.statusText}`));\r\n    });\r\n\r\n    request.addEventListener(\"error\", () => {\r\n      fail(new Error(\"Network Error\"));\r\n    });\r\n\r\n    request.send();\r\n  });\r\n};\r\n","import {\r\n  getClientsInfo,\r\n  selectedClientUpdate,\r\n  searchUpdate\r\n} from \"../../logic/app/actions\";\r\n\r\nexport function mapStateToProps(state) {\r\n  return {\r\n    ...state.app\r\n  };\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch) {\r\n  return {\r\n    getData(data) {\r\n      dispatch(getClientsInfo(data));\r\n    },\r\n    onSelect(client) {\r\n      dispatch(selectedClientUpdate(client));\r\n    },\r\n    onInputChange(data) {\r\n      console.log(data);\r\n      dispatch(searchUpdate(data));\r\n    }\r\n  };\r\n}\r\n","import {\r\n  GET_CLIENTS_INFO,\r\n  SELECTED_CLIENT_UPDATE,\r\n  SEARCH_UPDATE\r\n} from \"./actionTypes\";\r\n\r\nexport function getClientsInfo(payload) {\r\n  return {\r\n    type: GET_CLIENTS_INFO,\r\n    payload\r\n  };\r\n}\r\nexport function selectedClientUpdate(payload) {\r\n  return {\r\n    type: SELECTED_CLIENT_UPDATE,\r\n    payload\r\n  };\r\n}\r\nexport function searchUpdate(payload) {\r\n  return {\r\n    type: SEARCH_UPDATE,\r\n    payload\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const state = {\r\n  data: [],\r\n  selected: {},\r\n  data_to_render: []\r\n};\r\n\r\nexport default state;\r\n","import defaultState from \"../defaultState\";\r\nimport {\r\n  GET_CLIENTS_INFO,\r\n  SELECTED_CLIENT_UPDATE,\r\n  SEARCH_UPDATE\r\n} from \"./actionTypes\";\r\n\r\nfunction rootReducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case GET_CLIENTS_INFO: {\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        data_to_render: action.payload\r\n      };\r\n    }\r\n    case SELECTED_CLIENT_UPDATE: {\r\n      return {\r\n        ...state,\r\n        selected: action.payload\r\n      };\r\n    }\r\n    case SEARCH_UPDATE: {\r\n      return {\r\n        ...state,\r\n        data_to_render: action.payload\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import app from \"./app/reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({\r\n  app\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css';\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./logic/reducer\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}