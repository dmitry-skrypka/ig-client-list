{"version":3,"sources":["logic/app/actionTypes.js","helpers/searchInArray.js","helpers/config.js","components/list/client-item.js","components/list/index.js","components/info-tab/index.js","components/search-input/index.jsx","components/title/index.jsx","components/app/index.js","helpers/getDataFromLocalJson.js","components/app/container.js","logic/app/actions.js","serviceWorker.js","logic/defaultState.js","logic/app/reducer.js","logic/reducer.js","index.js"],"names":["GET_CLIENTS_INFO","SELECTED_CLIENT_UPDATE","DATA_TO_RENDER_UPDATE","search","el","keyword","type","match","string","searchInText","number","boolean","array","searchInArray","object","searchInObject","Error","concat","getFuncByType","Array","isArray","searchFunc","text","toString","toLowerCase","indexOf","obj","Object","values","arr","undefined","find","ClientItem","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","handleItemClick","client","props","onClick","inherits","createClass","key","value","selected","_this$props$client$ge","general","avatar","firstName","lastName","title","job","JSON","stringify","react_default","a","createElement","List","Item","style","background","Image","size","circular","src","Content","Header","Description","React","Component","ClientList","data","clients","map","index","client_item_ClientItem","onSelect","selection","animated","divided","padding","Icon","name","InfoTab","_this$props$selected$","_this$props$selected$2","contact","email","phone","_this$props$selected$3","address","city","country","street","zipCode","_this$props$selected$4","company","Group","className","Meta","Extra","SearchInput","handleInput","event","onChange","Input","fluid","icon","placeholder","Title","_this$props","as","textAlign","App","handleSearchInput","target","onInputChange","filter","url","_this2","Promise","success","fail","request","XMLHttpRequest","open","addEventListener","status","responseText","statusText","send","then","getData","parse","data_to_render","react","Grid","celled","container","Row","Column","width","title_Title","search_input_SearchInput","list_ClientList","info_tab_InfoTab","connect","state","objectSpread","app","dispatch","payload","Boolean","window","location","hostname","rootReducer","defaultState","action","combineReducers","store","createStore","reducer","composeWithDevTools","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a79babed.chunk.js","sourcesContent":["export const GET_CLIENTS_INFO = \"GET_CLIENTS_INFO\";\r\nexport const SELECTED_CLIENT_UPDATE = \"SELECTED_CLIENT_UPDATE:UPDATE\";\r\nexport const DATA_TO_RENDER_UPDATE = \"DATA_TO_RENDER_UPDATE:UPDATE\";\r\n","export function findFromList(list, keyword) {\r\n  return list.filter(el => search(el, keyword));\r\n}\r\n\r\nfunction search(el, keyword) {\r\n  const type = Array.isArray(el) ? \"array\" : typeof el;\r\n  const searchFunc = getFuncByType(type);\r\n\r\n  return searchFunc(el, keyword);\r\n}\r\n\r\nfunction getFuncByType(type) {\r\n  const match = {\r\n    string: searchInText,\r\n    number: searchInText,\r\n    boolean: searchInText,\r\n    array: searchInArray,\r\n    object: searchInObject\r\n  };\r\n\r\n  if (typeof match[type] !== \"undefined\") {\r\n    return match[type];\r\n  } else {\r\n    throw new Error(`Unknown element type \"${type}\"`);\r\n  }\r\n}\r\n\r\nfunction searchInText(text, keyword) {\r\n  return (\r\n    text\r\n      .toString()\r\n      .toLowerCase()\r\n      .indexOf(keyword.toLowerCase()) !== -1\r\n  );\r\n}\r\n\r\nfunction searchInObject(obj, keyword) {\r\n  return searchInArray(Object.values(obj), keyword);\r\n}\r\n\r\nfunction searchInArray(arr, keyword) {\r\n  return arr.find(el => search(el, keyword)) !== undefined;\r\n}\r\n","export const URL = \"./clients.json\";\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { List, Image } from 'semantic-ui-react';\r\n\r\nexport class ClientItem extends React.Component {\r\n  handleItemClick = () => {\r\n    const { client } = this.props;\r\n    this.props.onClick(client);\r\n  };\r\n  render() {\r\n    let selected = false;\r\n    const { avatar, firstName, lastName } = this.props.client.general;\r\n    const { title } = this.props.client.job;\r\n    if (\r\n      this.props.selected &&\r\n      JSON.stringify(this.props.selected) === JSON.stringify(this.props.client)\r\n    ) {\r\n      selected = !selected;\r\n    }\r\n    return (\r\n      <List.Item\r\n        onClick={this.handleItemClick}\r\n        style={{ background: selected ? '#e7ecec' : 'white' }}\r\n      >\r\n        <Image size=\"mini\" avatar circular src={avatar} />\r\n\r\n        <List.Content>\r\n          <List.Header>\r\n            {firstName} {lastName}\r\n          </List.Header>\r\n          <List.Description>{title}</List.Description>\r\n        </List.Content>\r\n      </List.Item>\r\n    );\r\n  }\r\n}\r\nClientItem.propTypes = {\r\n  client: PropTypes.object,\r\n};\r\n","import React from 'react';\nimport { List, Icon } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport { ClientItem } from './client-item';\n\nexport default class ClientList extends React.Component {\n  render() {\n    if (this.props.data.length) {\n      const selected = this.props.selected;\n      const arrayOfClients = this.props.data;\n      const clients = arrayOfClients.map((client, index) => (\n        <ClientItem\n          key={index}\n          client={client}\n          selected={selected}\n          onClick={this.props.onSelect}\n        />\n      ));\n      return (\n        <List selection animated divided>\n          {clients}\n        </List>\n      );\n    }\n    return (\n      <div style={{ padding: 10 }}>\n        {' '}\n        <Icon name=\"frown\" />\n        Nothing found...\n      </div>\n    );\n  }\n}\n\nClientList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { Item, Icon } from 'semantic-ui-react';\n\nexport default class InfoTab extends React.Component {\n  render() {\n    if (this.props.selected.general) {\n      const\n          { avatar, firstName, lastName } = this.props.selected.general,\n          { email, phone } = this.props.selected.contact,\n          { city, country, street, zipCode } = this.props.selected.address,\n          { company, title } = this.props.selected.job;\n      return (\n        <Item.Group divided className=\"clientInfo\">\n          <Item>\n            <Item.Image size=\"small\" src={avatar} />\n\n            <Item.Content>\n              <Item.Header>\n                {firstName} {lastName}\n              </Item.Header>\n              <Item.Meta>\n                <span>\n                  {title} in {company}\n                </span>\n              </Item.Meta>\n\n              <Item.Extra>\n                <Icon name=\"mail\" /> email: {email}\n              </Item.Extra>\n              <Item.Extra>\n                {' '}\n                <Icon name=\"phone square\" />\n                phone: {phone}\n              </Item.Extra>\n              <Item.Extra>\n                {' '}\n                <Icon name=\"map marker alternate\" />\n                {country} {city} {street} {zipCode}\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      );\n    } else {\n      return <span>Please select Client</span>;\n    }\n  }\n}\nInfoTab.propTypes = {\n  selected: PropTypes.object,\n};\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nexport class SearchInput extends React.Component {\r\n  handleInput = event => {\r\n    this.props.onChange(event);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Input\r\n        fluid\r\n        icon=\"search\"\r\n        placeholder=\"Search...\"\r\n        onChange={this.handleInput}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nSearchInput.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\nexport class Title extends React.Component {\r\n  render() {\r\n    const { name, icon } = this.props;\r\n    return (\r\n      <Header as=\"h4\" textAlign=\"center\">\r\n        <Header.Content>\r\n          <Icon name={icon} />\r\n          {name}\r\n        </Header.Content>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n\r\nTitle.propTypes = {\r\n  name: PropTypes.string,\r\n  icon: PropTypes.string,\r\n};\r\n","import React, { Fragment } from 'react';\n\nimport { connect } from 'react-redux';\nimport { mapStateToProps, mapDispatchToProps } from './container';\nimport getDataFromLocalJson from '../../helpers/getDataFromLocalJson';\nimport { findFromList } from '../../helpers/searchInArray';\nimport { URL } from '../../helpers/config';\nimport ClientList from '../list';\nimport  InfoTab  from '../info-tab';\nimport { SearchInput } from '../search-input';\nimport { Grid } from 'semantic-ui-react';\nimport { Title } from '../title';\nexport class App extends React.Component {\n  componentDidMount() {\n    getDataFromLocalJson(URL).then(data => {\n      this.props.getData(JSON.parse(data));\n    });\n  }\n  handleItemClick = data => {\n    this.props.onSelect(data);\n  };\n\n  handleSearchInput = event => {\n    const\n\t\tvalue = event.target.value,\n\t\t{ data } = this.props;\n\n    this.props.onInputChange(findFromList(data, value));\n  };\n  render() {\n    const {data_to_render, selected }= this.props;\n\n    return (\n      <Fragment>\n        <Grid celled container>\n          <Grid.Row style={{ background: '#e7ecec' }}>\n            <Grid.Column width={5}>\n              <Title name={'Clients'} icon={'users'} />\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <Title name={'Info'} icon={'info circle'} />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column width={5}>\n              <SearchInput onChange={this.handleSearchInput} />\n              <ClientList\n                data={data_to_render}\n                selected={selected}\n                onSelect={this.handleItemClick}\n              />\n            </Grid.Column>\n            <Grid.Column width={11}>\n              <InfoTab selected={selected} />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","export default url => {\r\n  return new Promise((success, fail) => {\r\n    const request = new XMLHttpRequest();\r\n    request.open(\"GET\", url, true);\r\n\r\n    request.addEventListener(\"load\", () => {\r\n      request.status >= 200 && request.status < 400\r\n        ? success(request.responseText)\r\n        : fail(new Error(`Request Failed: ${request.statusText}`));\r\n    });\r\n\r\n    request.addEventListener(\"error\", () => {\r\n      fail(new Error(\"Network Error\"));\r\n    });\r\n\r\n    request.send();\r\n  });\r\n};\r\n","import {\r\n  getClientsInfo,\r\n  selectedClientUpdate,\r\n  dataUpdate,\r\n} from '../../logic/app/actions';\r\n\r\nexport function mapStateToProps(state) {\r\n  return {\r\n    ...state.app,\r\n  };\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch) {\r\n  return {\r\n    getData(data) {\r\n      dispatch(getClientsInfo(data));\r\n    },\r\n    onSelect(client) {\r\n      dispatch(selectedClientUpdate(client));\r\n    },\r\n    onInputChange(data) {\r\n      dispatch(dataUpdate(data));\r\n    },\r\n  };\r\n}\r\n","import {\r\n  GET_CLIENTS_INFO,\r\n  SELECTED_CLIENT_UPDATE,\r\n\tDATA_TO_RENDER_UPDATE,\r\n} from './actionTypes';\r\n\r\nexport function getClientsInfo(payload) {\r\n  return {\r\n    type: GET_CLIENTS_INFO,\r\n    payload,\r\n  };\r\n}\r\nexport function selectedClientUpdate(payload) {\r\n  return {\r\n    type: SELECTED_CLIENT_UPDATE,\r\n    payload,\r\n  };\r\n}\r\nexport function dataUpdate(payload) {\r\n  return {\r\n    type: DATA_TO_RENDER_UPDATE,\r\n    payload,\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const state = {\r\n  data: [],\r\n  selected: {},\r\n  data_to_render: []\r\n};\r\n\r\nexport default state;\r\n","import defaultState from '../defaultState';\r\nimport {\r\n  GET_CLIENTS_INFO,\r\n  SELECTED_CLIENT_UPDATE,\r\n  DATA_TO_RENDER_UPDATE,\r\n} from './actionTypes';\r\n\r\nfunction rootReducer(state = defaultState, action) {\r\n  switch (action.type) {\r\n    case GET_CLIENTS_INFO: {\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        data_to_render: action.payload,\r\n      };\r\n    }\r\n    case SELECTED_CLIENT_UPDATE: {\r\n      return {\r\n        ...state,\r\n        selected: action.payload,\r\n      };\r\n    }\r\n    case DATA_TO_RENDER_UPDATE: {\r\n      return {\r\n        ...state,\r\n        data_to_render: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\nexport default rootReducer;\r\n","import app from \"./app/reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({\r\n  app\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./logic/reducer\";\nimport \"semantic-ui-css/semantic.min.css\";\n\n\nconst store = createStore(reducer,\n\tcomposeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}